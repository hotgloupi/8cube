#include <wrappers/boost/python.hpp>

#include "exception.hpp"

#include <sstream>

PyObject* ExceptionType = nullptr;

namespace {

	// from http://stackoverflow.com/questions/9620268/boost-python-custom-exception-class
	PyObject*
	create_exception_type(const char* name,
	                      PyObject* baseTypeObj = PyExc_Exception)
	{
		namespace bp = boost::python;

		std::string scopeName = bp::extract<std::string>(bp::scope().attr("__name__"));
		std::string qualifiedName0 = scopeName + "." + name;
		char* qualifiedName1 = const_cast<char*>(qualifiedName0.c_str());

		PyObject* typeObj = PyErr_NewException(qualifiedName1, baseTypeObj, 0);
		if(!typeObj) bp::throw_error_already_set();
		bp::scope().attr(name) = bp::handle<>(bp::borrowed(typeObj));
		return typeObj;
	}


	void translator(cube::exception::Exception const& e)
	{
		//PyErr_SetObject(ExceptionType, boost::python::object(e).ptr());
		std::stringstream bt;
		bt << e;
		std::string str = std::string{e.what()} + "\nC++ Traceback:\n" + bt.str();
		PyErr_SetString(ExceptionType, str.c_str());
	}

} // !anonymous

void test()
{
	throw cube::exception::Exception("Coucou !");
}

BOOST_PYTHON_MODULE(exception)
{

	namespace py = boost::python;
	//py::class_<cube::exception::Exception>("_Exception", py::no_init);
	ExceptionType = create_exception_type("Exception");
	py::register_exception_translator<cube::exception::Exception>(&translator);
	py::def("test", &test);
}
