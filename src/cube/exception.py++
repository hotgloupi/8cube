#include <wrappers/boost/python.hpp>

#include "exception.hpp"

#include <etc/backtrace.hpp>
#include <etc/to_string.hpp>
#include <etc/types.hpp>

PyObject* ExceptionType = nullptr;

namespace {

	// from http://stackoverflow.com/questions/9620268/boost-python-custom-exception-class
	PyObject*
	create_exception_type(const char* name,
	                      PyObject* baseTypeObj = PyExc_Exception)
	{
		namespace py = boost::python;

		std::string scopeName = py::extract<std::string>(py::scope().attr("__name__"));
		std::string qualifiedName0 = scopeName + "." + name;
		char* qualifiedName1 = const_cast<char*>(qualifiedName0.c_str());

		PyObject* typeObj = PyErr_NewException(qualifiedName1, baseTypeObj, 0);
		if(!typeObj) py::throw_error_already_set();
		py::scope().attr(name) = py::handle<>(py::borrowed(typeObj));
		return typeObj;
	}


	void translator(cube::exception::Exception const& e)
	{
		namespace py = boost::python;
		py::list backtrace;
		if (auto bt = e.backtrace())
		{
			for (auto frame : *bt)
				backtrace.append(
					static_cast<std::string>(frame)
				);
		}
		py::object exception_type(py::handle<>(py::borrowed(ExceptionType)));
		exception_type.attr("backtrace") = backtrace;

		//PyErr_SetObject(ExceptionType, boost::python::object(e).ptr());
		PyErr_SetString(
			ExceptionType,
			etc::to_string(ETC_TYPE_STRING(e), ':', e.what()).c_str()
		);
	}

} // !anonymous

namespace cube { namespace exception {

	void testlast()
	{
		throw Exception("Coucou !");
	}

	void test()
	{
		testlast();
	}

}}

BOOST_PYTHON_MODULE(exception)
{

	namespace py = boost::python;
	//py::class_<cube::exception::Exception>("_Exception", py::no_init);
	ExceptionType = create_exception_type("Exception");
	py::register_exception_translator<cube::exception::Exception>(&translator);
	py::def("test", &cube::exception::test);
}
