#include <wrappers/boost/python.hpp>

#include <etc/log.hpp>

#include <unordered_set>

namespace {

	std::string const& static_storage(std::string&& str)
	{
		static std::string out_of_memory{"out of memory"};
		static std::unordered_set<std::string> storage;
		try { return *storage.emplace(std::move(str)).first; }
		catch (...) { return out_of_memory; }
	}

	void send(etc::log::Level level,
		      std::string file,
		      etc::size_type line,
		      std::string function,
		      std::string component,
		      std::string msg)
	{
		etc::log::Log{
			level,
			static_storage(std::move(file)).c_str(),
			line,
			static_storage(std::move(function)).c_str(),
			static_storage(std::move(component)),
		}.send(std::move(msg));
	}

}

BOOST_PYTHON_MODULE(_log)
{
	namespace py = boost::python;
	using namespace etc::log;

	py::enum_<Level>("Level")
		.value("debug", Level::debug)
		.value("info",  Level::info)
		.value("warn",  Level::warn)
		.value("error", Level::error)
		.value("fatal", Level::fatal)
	;

	py::def("send", &send);

	py::enum_<Mode>("Mode")
		.value("asynchroneous", Mode::asynchroneous)
		.value("synchroneous", Mode::synchroneous)
	;

	py::def("set_mode", &set_mode);
}
