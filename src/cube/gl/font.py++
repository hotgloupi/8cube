#include <wrappers/boost/python.hpp>

#include "font.hpp"
#include "renderer/Renderer.hpp"
#include "renderer.hpp"
#include "renderer/VertexBuffer.hpp"

namespace py = boost::python;
using namespace cube::gl;

namespace {

	struct Proxy
	{
		struct Font
		{
			static
			renderer::VertexBuffer*
			generate_text(font::Font& self, char16_t const* str)
			{
				assert(str != nullptr && "Null string !");
				return self.generate_text(
					std::basic_string<char16_t>(str)
				).release();
			}

			static
			font::FontInfos*
			get_infos(std::string const& path)
			{
				return font::get_infos(path).release();
			}
		};
	};

} // !anonymous

BOOST_PYTHON_MODULE(font)
{
	py::class_<font::Font, boost::noncopyable>(
			"Font",
			py::init<
				  renderer::Renderer&
				, std::string const&
				, etc::size_type
			>()
		)
		.def(
			"generate_text",
			&Proxy::Font::generate_text,
			py::return_internal_reference<>()
		)
	;

	py::def("can_load_file", &font::can_load_file);

	py::class_<font::FontInfos, boost::noncopyable>("FontInfos", py::no_init)
		.def_readonly("path", &font::FontInfos::path)
		.def_readonly("family_name", &font::FontInfos::family_name)
		.def_readonly("style_name", &font::FontInfos::style_name)
	;

	py::def(
		"get_infos",
		&Proxy::Font::get_infos,
		py::return_value_policy<py::manage_new_object>()
	);
}
