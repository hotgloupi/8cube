#include <wrappers/boost/python.hpp>

#include "matrix.hpp"

#include <array>

using namespace cube::gl;
namespace py = boost::python;

namespace {

	template<typename T>
	std::string print_obj(T const& obj)
	{
		std::stringstream ss;
		ss << obj;
		return ss.str();
	}

	matrix::Matrix44f::col_type&
	matrix_row(matrix::Matrix44f& mat,
	           etc::size_type const row)
	{
		if (row > 3)
			throw std::out_of_range{std::to_string(row) + " is greater than 3"};
		return mat[row];
	}

}

BOOST_PYTHON_MODULE(matrix)
{
	BOOST_PYTHON_DOCSTRING_OPTIONS();
	py::class_<matrix::Matrix44f>("Matrix44f", py::init<>())
		.def(py::init<matrix::Matrix44f const&>())
		.def("__str__", &print_obj<matrix::Matrix44f>)
		.def("__getitem__", &matrix_row, py::return_internal_reference<>())
		.def(py::self == py::self)
		.def(py::self * py::self)
	;
	py::def("perspective", &matrix::perspective<float>);
	py::def("look_at", &matrix::look_at<float>);
	py::def(
		"translate",
		static_cast<
			matrix::Matrix44<float>(*)(matrix::Matrix44<float> const&, float const, float const, float const)
		>(&matrix::translate<float>)
	);
	py::def(
		"translate",
		static_cast<
			matrix::Matrix44<float>(*)(matrix::Matrix44<float> const&, vector::Vector3<float> const&)
		>(&matrix::translate<float>)
	);

	py::def(
		"scale",
		static_cast<
			matrix::Matrix44<float>(*)(matrix::Matrix44<float> const&, float const, float const, float const)
		>(&matrix::scale<float>)
	);

}
