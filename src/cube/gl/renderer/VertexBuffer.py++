#include "VertexBuffer.hpp"
#include "VertexBufferAttribute.hpp"

#include <cube/python.hpp>

namespace py = boost::python;
using namespace ::cube::gl::renderer;

namespace {

	VertexBufferAttribute& getitem(VertexBuffer& self, etc::size_type const idx)
	{
		if (idx >= self.attributes().size())
			throw std::range_error(
			    etc::to_string(idx, ">=", self.attributes().size())
			);
		return *self.attributes()[idx];
	}

}

BOOST_PYTHON_MODULE(VertexBuffer)
{
	py::class_<
			VertexBuffer,
			std::shared_ptr<VertexBuffer>,
			boost::noncopyable,
			py::bases<Bindable, cube::resource::Resource>
		>(
			"VertexBuffer",
			py::no_init
		)
		.def(
			"__getitem__",
			&getitem,
			py::return_internal_reference<>()
		)
		.def(
			"reload", &VertexBuffer::reload
		)
	;
	py::implicitly_convertible<VertexBufferPtr, BindablePtr>();
}
