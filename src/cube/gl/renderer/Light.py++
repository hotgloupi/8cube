#include "Light.hpp"

#include <wrappers/boost/python.hpp>

BOOST_PYTHON_MODULE(Light)
{
	using namespace cube::gl::renderer;
	namespace py = boost::python;
	namespace vector = cube::gl::vector;
	namespace color = cube::gl::color;
	namespace units = cube::units;

	py::enum_<LightKind>("LightKind")
		.value("point", LightKind::point)
		.value("spot", LightKind::spot)
		.value("directional", LightKind::directional)
		.value("custom", LightKind::custom)
	;

	py::class_<DirectionalLightInfo>(
			"DirectionalLightInfo",
			py::init<
				  vector::Vector3f
				, color::Color3f
				, color::Color3f
			>()
		)
		.def_readwrite("direction", &DirectionalLightInfo::direction)
		.def_readwrite("diffuse", &DirectionalLightInfo::diffuse)
		.def_readwrite("specular", &DirectionalLightInfo::specular)
	;

	py::class_<PointLightInfo>(
			"PointLightInfo",
			py::init<
				  vector::Vector3f
				, color::Color3f
				, color::Color3f
			>()
		)
		.def_readwrite("position", &PointLightInfo::position)
		.def_readwrite("diffuse", &PointLightInfo::diffuse)
		.def_readwrite("specular", &PointLightInfo::specular)
	;

	py::class_<SpotLightInfo>(
			"SpotLightInfo",
			py::init<
				  vector::Vector3f
				, vector::Vector3f
				, color::Color3f
				, color::Color3f
				, float
				, units::Angle
			>()
		)
		.def_readwrite("position", &SpotLightInfo::position)
		.def_readwrite("direction", &SpotLightInfo::direction)
		.def_readwrite("diffuse", &SpotLightInfo::diffuse)
		.def_readwrite("specular", &SpotLightInfo::specular)
		.def_readwrite("attenuation", &SpotLightInfo::attenuation)
		.def_readwrite("cutoff", &SpotLightInfo::cutoff)
	;

#define ADD_PROPERTY(__name) \
		add_property( \
			#__name, \
			py::make_function( \
				&Light::__name, \
				py::return_internal_reference<>() \
			) \
		) \
/**/

	py::class_<Light, py::bases<Bindable>, boost::noncopyable, LightPtr>(
			"Light", py::no_init
		)
		.ADD_PROPERTY(directional)
		.ADD_PROPERTY(point)
		.ADD_PROPERTY(spot)
		.ADD_PROPERTY(custom)
	;
}
