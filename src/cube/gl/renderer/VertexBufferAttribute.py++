#include "VertexBufferAttribute.hpp"

#include <cube/gl/color.hpp>
#include <cube/gl/exception.hpp>
#include <cube/gl/vector.hpp>

#include <etc/to_string.hpp>

#include <cube/python.hpp>

namespace py = boost::python;

using namespace ::cube::gl::renderer;
using namespace ::cube::gl::vector;
using namespace ::cube::gl::color;
using namespace ::cube::gl;

typedef cube::gl::exception::Exception Exception;

namespace {

	template<typename T>
	VertexBufferAttributePtr
	_make_vb_attr(ContentKind kind,
				  py::list list,
				  etc::size_type const len,
				  ContentHint const hint)
	{
		std::unique_ptr<T, void(*)(void*)> array{
			static_cast<T*>(::malloc(len * sizeof (T))),
			&std::free
		};
		for (etc::size_type i = 0; i < len; ++i)
		{
			boost::python::object elem = list[i];
			array.get()[i] = py::extract<T>(elem);
		}
		return make_vertex_buffer_attribute(kind, std::move(array), len, hint);
	}

	VertexBufferAttributePtr
	make_vb_attr(ContentKind kind,
				 py::list list,
				 ContentHint const hint = ContentHint::static_content)
	{
		etc::size_type const len = py::len(list);
		if (len == 0)
			throw Exception{
				"Empty content"
			};

		py::object first = list[0];

		switch (kind)
		{
#define _CHECK(type)                                                          \
		if (boost::python::extract<type>(first).check())                      \
			return _make_vb_attr<type>(kind, list, len, hint)                 \
/**/
		case ContentKind::color:
			_CHECK(cube::gl::color::Color3f);
			_CHECK(cube::gl::color::Color4f);
			break;
		case ContentKind::index:
			{
				uint64_t max = 0;
				for (etc::size_type i = 0; i < len; ++i)
				{
					uint64_t e = py::extract<uint64_t>(list[i]);
					if (e > max) max = e;
				}
				if (max > std::numeric_limits<uint32_t>::max())
					throw Exception("Too many indices");
				else if (max > std::numeric_limits<uint16_t>::max())
					return _make_vb_attr<uint32_t>(kind, list, len, hint);
				else if (max > std::numeric_limits<uint8_t>::max())
					return _make_vb_attr<uint16_t>(kind, list, len, hint);
				else
					return _make_vb_attr<uint8_t>(kind, list, len, hint);
			}
			break;
		default:
			_CHECK(cube::gl::vector::Vector2f);
			_CHECK(cube::gl::vector::Vector3f);
			_CHECK(cube::gl::vector::Vector4f);
#undef _CHECK
		}

		throw Exception{
			"List content has to be of type " + etc::to_string(kind) +
			", got '" + py::to_string(first) + "' instead"
		};

		throw "Never reached";
		return VertexBufferAttributePtr{nullptr};
	}

	std::string __str__(std::auto_ptr<VertexBufferAttribute> const& self_)
	{
		if (self_.get() == nullptr)
			return "<VertexBufferAttribute (null)>";
		auto self = *self_.get();
		return etc::to_string(
			"<VertexBufferAttribute",
			self.kind,
			self.type,
			self.hint,
			"arity=" + etc::to_string(self.arity),
			"nb_elements=" + etc::to_string(self.nb_elements),
			etc::io::nosep(),
			'>'
		);
	}

	void setitem(VertexBufferAttribute& self,
	             etc::size_type index, py::object value)
	{
		switch (self.kind)
		{
		case ContentKind::index:
			self.set(index, py::extract<unsigned int>(value)());
			break;
		case ContentKind::normal:
		case ContentKind::vertex:
		case ContentKind::tex_coord0:
		case ContentKind::tex_coord1:
		case ContentKind::tex_coord2:
		case ContentKind::tex_coord3:
		case ContentKind::tex_coord4:
		case ContentKind::tex_coord5:
		case ContentKind::tex_coord6:
		case ContentKind::tex_coord7:
			if (self.arity == 2)
				self.set(index, py::extract<Vector2f>(value)());
			else if (self.arity == 3)
				self.set(index, py::extract<Vector3f>(value)());
			else if (self.arity == 4)
				self.set(index, py::extract<Vector4f>(value)());
			else
				throw Exception("Unknown arity");
			break;
		case ContentKind::color0:
		case ContentKind::color1:
		case ContentKind::color2:
		case ContentKind::color3:
			if (self.arity == 3)
				self.set(index, py::extract<Color3f>(value)());
			else if (self.arity == 4)
				self.set(index, py::extract<Color4f>(value)());
			else
				throw Exception("Unknown arity");
			break;
		default:
			throw Exception("Unknown content kind: " + etc::to_string(self.kind));
		}
	}

	py::object getitem(VertexBufferAttribute& self,
	                   etc::size_type index)
	{
		return py::object(self.get<Color3f>(index));
	}

} // !anonymous

BOOST_PYTHON_MODULE(VertexBufferAttribute)
{
	py::class_<
		VertexBufferAttribute
	  , VertexBufferAttributePtr
	  , boost::noncopyable
	>("VertexBufferAttribute", py::no_init)
		.def("__str__", &__str__)
		.def("__setitem__", &setitem)
		.def("__getitem__", &getitem)
	;

	py::def(
		"make_vertex_buffer_attribute",
		&make_vb_attr
	);
}
