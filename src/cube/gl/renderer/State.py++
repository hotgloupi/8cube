#include "State.hpp"
#include <etc/print.hpp>
#include <cube/python.hpp>

namespace {

	using namespace ::cube::gl::renderer;
	bool compare_state(State const& lhs, State const& rhs)
	{ return &lhs == &rhs; }

	class StateHolder
	{
	private:
		std::shared_ptr<State> _state;

	public:
		StateHolder(Mode const mode)
			: _state{new State{mode}}
		{}

		std::weak_ptr<State> state() { return _state; }
	};

	State& simple_ortho(State& self,
	                    State::component_type const l,
	                    State::component_type const r,
	                    State::component_type const b,
	                    State::component_type const t)
	{ return  self.ortho(l, r, b, t); }

}

BOOST_PYTHON_MODULE(State)
{
	namespace py = boost::python;
	using namespace ::cube::gl::renderer;

	typedef State& (State::*set_matrix_t)(matrix_type const&);
	typedef matrix_type const& (State::*get_matrix_t)() const;

	py::class_<StateHolder, boost::noncopyable>("StateHolder", py::init<Mode>())
		.add_property(
			"state",
			py::make_function(
				&StateHolder::state,
				py::return_value_policy<
					py::return_by_value,
					py::with_custodian_and_ward_postcall<0, 1>
				>()
			)
		)
	;

	// Helper types to cast translate and scale overloads.
	typedef State::component_type component_t;
	typedef State::vector_type vector_t;
	typedef State& (State::*component_op_t)(component_t const,
	                                        component_t const,
	                                        component_t const);
	typedef State& (State::*vector_op_t)(vector_t const&);
	typedef State& (State::*ortho_simple_t)(component_t const,
	                                        component_t const,
	                                        component_t const,
	                                        component_t const);

	py::class_<State, boost::noncopyable, std::weak_ptr<State>>(
		"State", py::no_init
	)
# define EXPORT_STATE_MATRIX(__name)                                          \
		.add_property(                                                        \
			#__name,                                                          \
			py::make_function(                                                \
				static_cast<get_matrix_t>(&State::__name),                    \
				py::return_internal_reference<>()                             \
			),                                                                \
			py::make_function(                                                \
				static_cast<set_matrix_t>(&State::__name),                    \
				py::return_self<>()                                           \
			)                                                                 \
		)                                                                     \
/**/
		EXPORT_STATE_MATRIX(model)
		EXPORT_STATE_MATRIX(view)
		EXPORT_STATE_MATRIX(projection)
		.add_property(
			"mvp",
			py::make_function(
				static_cast<get_matrix_t>(&State::mvp),
				py::return_internal_reference<>()
			)
		)

		.def("translate", static_cast<component_op_t>(&State::translate), py::return_self<>())
		.def("translate", static_cast<vector_op_t>(&State::translate), py::return_self<>())
		.def("scale", static_cast<component_op_t>(&State::scale), py::return_self<>())
		.def("scale", static_cast<vector_op_t>(&State::scale), py::return_self<>())
		.def("rotate", &State::rotate, py::return_self<>())
		.def("look_at", &State::look_at, py::return_self<>())
		.def("perspective", &State::perspective, py::return_self<>())
		.def("ortho", &State::ortho, py::return_self<>())
		.def("ortho", &simple_ortho, py::return_self<>())
		.def("__eq__", compare_state)
	;
}
