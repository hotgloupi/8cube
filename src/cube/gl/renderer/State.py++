#include "State.hpp"

#include <wrappers/boost/python.hpp>

BOOST_PYTHON_MODULE(State)
{
	namespace py = boost::python;
	using namespace ::cube::gl::renderer;

	typedef State& (State::*set_matrix_t)(matrix_type const&);
	typedef matrix_type const& (State::*get_matrix_t)() const;

	py::class_<State, boost::noncopyable>("State", py::init<Mode>())

# define EXPORT_STATE_MATRIX(__name)                                          \
		.add_property(                                                        \
			#__name,                                                          \
			py::make_function(                                                \
				static_cast<get_matrix_t>(&State::__name),                    \
				py::return_internal_reference<>()                             \
			),                                                                \
			py::make_function(                                                \
				static_cast<set_matrix_t>(&State::__name),                    \
				py::return_self<>()                                           \
			)                                                                 \
		)                                                                     \
/**/
		EXPORT_STATE_MATRIX(model)
		EXPORT_STATE_MATRIX(view)
		EXPORT_STATE_MATRIX(projection)
		.add_property(
			"mvp",
			py::make_function(
				static_cast<get_matrix_t>(&State::mvp),
				py::return_internal_reference<>()
			)
		)

		.def("translate", &State::translate, py::return_self<>())
		.def("scale", &State::scale, py::return_self<>())
		.def("rotate", &State::rotate, py::return_self<>())
		.def("look_at", &State::look_at, py::return_self<>())
		.def("perspective", &State::perspective, py::return_self<>())
		.def("ortho", &State::ortho, py::return_self<>())
	;
}
