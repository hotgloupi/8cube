#include <wrappers/boost/python.hpp>

#include "renderer_bindings/exports.hpp"

#include "renderer/Shader.hpp"
#include "renderer/ShaderProgram.hpp"

namespace {

	struct Wrap
	{
		///////////////////////////////////////////////////////////////////////
		// Convert unique_ptr

		// This is involved when returning by value, and as copying is not
		// allowed for a unique_ptr, we can safely remove de const qualifiers.
		// This is meant to happen when returning unique_ptr<T>, for the
		// caller, the variable is moved.
		//
		// When boost python handle properly to move operation, this could go
		// away.

		template<typename T>
		struct UniquePtrConverter
		{
			static
			PyObject* convert(std::unique_ptr<T> const& value)
			{
				return boost::python::incref(
					boost::python::object(
						std::auto_ptr<T>(
							const_cast<std::unique_ptr<T>&>(value).release()
						)
					).ptr()
				);
			}
		};
	}; // !struct Wrap

} // !anonymous



BOOST_PYTHON_MODULE(renderer)
{
	BOOST_PYTHON_DOCSTRING_OPTIONS();
	namespace py = boost::python;
	using namespace cube::gl::renderer_bindings;
	using namespace cube::gl::renderer;

	export_constants();
	export_bindable();
	export_state();
	export_painter();
	export_renderer();
	export_vertex_buffer();
	export_vertex_buffer_attribute();
	export_shader();
	export_shader_program();
	export_texture();

	///////////////////////////////////////////////////////////////////////////
	// std::unique_ptr<T> to python converters.

#define PTR_TO_PYTHON(__type)                                                 \
	py::to_python_converter<                                                  \
		std::unique_ptr<__type>,                                              \
		Wrap::UniquePtrConverter<__type>                                      \
	>()                                                                       \
/**/

	PTR_TO_PYTHON(VertexBuffer);
	PTR_TO_PYTHON(VertexBufferAttribute);
	PTR_TO_PYTHON(ShaderProgram);
	PTR_TO_PYTHON(Shader);

}
