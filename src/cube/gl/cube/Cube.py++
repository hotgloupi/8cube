#include "Cube.hpp"

#include <cube/python.hpp>

#include <etc/to_string.hpp>

template<typename T>
static
void export_cube_class(std::string const& suffix)
{
	namespace py = boost::python;
	using namespace cube::gl::cube;
	typedef Cube3<T> cube_t;
	typedef typename cube_t::vec3 vec3_t;
	typedef
		vec3_t (cube_t::*get_vertex_from_axis_t)(XAxis const,
		                                         YAxis const,
		                                         ZAxis const) const;
	typedef
		vec3_t (cube_t::*get_vertex_from_index_t)(etc::size_type const) const;
	typedef
		bool (cube_t::*contains_components_t)(T const, T const, T const) const;
	typedef
		bool (cube_t::*contains_vec3_t)(vec3_t const&) const;

	std::string cls_name = "Cube3" + suffix;
	py::class_<Cube3<T>>(
			cls_name.c_str(),
			py::init<vec3_t const&, T const>()
		)
		.def(
			"vertex",
			static_cast<get_vertex_from_axis_t>(&cube_t::vertex)
		)
		.def(
			"vertex",
			static_cast<get_vertex_from_index_t>(&cube_t::vertex)
		)
		.def("__str__", &etc::to_string<cube_t const&>)
		.def(
			"contains",
			static_cast<contains_components_t>(&cube_t::contains)
		)
		.def(
			"contains",
			static_cast<contains_vec3_t>(&cube_t::contains)
		)
		.def_readwrite(
			"center",
			&cube_t::center
		)
		.def_readwrite(
			"width",
			&cube_t::width
		)
	;
}

BOOST_PYTHON_MODULE(Cube)
{
	CUBE_PYTHON_DOCSTRING_OPTIONS();
	namespace py = boost::python;
	using namespace cube::gl::cube;

	py::enum_<XAxis>("XAxis")
		.value("left", XAxis::left)
		.value("right", XAxis::right)
	;

	py::enum_<YAxis>("YAxis")
		.value("top", YAxis::top)
		.value("down", YAxis::down)
	;

	py::enum_<ZAxis>("ZAxis")
		.value("front", ZAxis::front)
		.value("back", ZAxis::back)
	;

	export_cube_class<float>("f");
	export_cube_class<double>("d");
	export_cube_class<int32_t>("i");
	export_cube_class<uint32_t>("u");
	export_cube_class<int64_t>("il");
	export_cube_class<uint64_t>("ul");
}
