
#include <wrappers/boost/python.hpp>

#include "vector.hpp"
using namespace ::cube::gl::vector;

namespace {

	template<typename T>
	std::string print_obj(T const& obj)
	{
		std::stringstream ss;
		ss << obj;
		return ss.str();
	}

}

BOOST_PYTHON_MODULE(vector)
{
	namespace py = boost::python;

#define EXPORT_VECTOR(__value_type, __arity, __suffix)                        \
	_EXPORT_VECTOR(__value_type,                                              \
	               Vector ## __arity<__value_type>,                           \
	               "Vector" #__arity #__suffix                                \
	)
/**/

#define _EXPORT_VECTOR(__value_type, __type, __type_str)                      \
	py::class_<__type>(__type_str)                                            \
		.def(                                                                 \
			"__str__",                                                        \
			&print_obj<__type>                                                \
		)                                                                     \
		.def(py::self * __value_type())                                       \
		.def(__value_type() * py::self)                                       \
		.def(py::self *= __type())                                            \
		.def(py::self + py::self)                                             \
		.def(py::self += __type())                                            \
		.def(py::self / __value_type())                                       \
		.def(__value_type() / py::self)                                       \
		.def(py::self /= __type())                                            \
		.def(py::self - py::self)                                             \
		.def(py::self -= __type())                                            \
/**/

	EXPORT_VECTOR(float, 2, f)
		.def(py::init<float, float>())
		.def_readonly("x", &Vector2f::x)
		.def_readonly("y", &Vector2f::y)
	;

	EXPORT_VECTOR(float, 3, f)
		.def(py::init<float, float, float>())
		.def_readonly("x", &Vector3f::x)
		.def_readonly("y", &Vector3f::y)
		.def_readonly("z", &Vector3f::z)
	;

	py::def("cross", &cross<float>);
	py::def("normalize", static_cast<Vector3f (*)(Vector3f const&)>(&normalize));
}
