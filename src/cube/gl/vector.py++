
#include <wrappers/boost/python.hpp>

#include "vector.hpp"
using namespace ::cube::gl::vector;

namespace {

	template<typename T>
	std::string print_obj(T const& obj)
	{
		std::stringstream ss;
		ss << obj;
		return ss.str();
	}

	template<typename T, etc::size_type arity>
	struct Wrap
	{
		typedef typename T::value_type value_type;

		static
		value_type
		getitem(T const& self, etc::size_type const index)
		{
			if (index >= arity)
				throw std::out_of_range{std::to_string(index) + " is out of range"};
			return self[index];
		}

		static
		void
		setitem(T& self, etc::size_type const index, value_type const value)
		{
			if (index >= arity)
				throw std::out_of_range{std::to_string(index) + " is out of range"};
			self[index] = value;
		}

	};

}

BOOST_PYTHON_MODULE(vector)
{
	BOOST_PYTHON_DOCSTRING_OPTIONS();
	namespace py = boost::python;

#define EXPORT_VECTOR(__value_type, __arity, __suffix)                        \
	_EXPORT_VECTOR(__value_type,                                              \
	               Vector ## __arity<__value_type>,                           \
	               "Vector" #__arity #__suffix                                \
	)                                                                         \
	.def(                                                                     \
		"__getitem__",                                                        \
		&Wrap<Vector ## __arity<__value_type>, __arity>::getitem              \
	)                                                                         \
	.def(                                                                     \
		"__setitem__",                                                        \
		&Wrap<Vector ## __arity<__value_type>, __arity>::setitem              \
	)                                                                         \
/**/

#define _EXPORT_VECTOR(__value_type, __type, __type_str)                      \
	py::class_<__type>(__type_str)                                            \
		.def(                                                                 \
			"__str__",                                                        \
			&print_obj<__type>                                                \
		)                                                                     \
		.def(py::self * __value_type())                                       \
		.def(__value_type() * py::self)                                       \
		.def(py::self *= __type())                                            \
		.def(py::self + py::self)                                             \
		.def(py::self += __type())                                            \
		.def(py::self / __value_type())                                       \
		.def(__value_type() / py::self)                                       \
		.def(py::self /= __type())                                            \
		.def(py::self - py::self)                                             \
		.def(py::self -= __type())                                            \
/**/

#define EXPORT_VECTOR2(__value_type, __suffix)                                \
	EXPORT_VECTOR(__value_type, 2, __suffix)                                  \
		.def(py::init<float, float>())                                        \
		.def(py::init<double, double>())                                      \
		.def(py::init<int32_t, int32_t>())                                    \
		.def(py::init<int64_t, int64_t>())                                    \
		.def_readwrite("x", &Vector2<__value_type>::x)                        \
		.def_readwrite("y", &Vector2<__value_type>::y)                        \
	;

#define EXPORT_VECTOR3(__value_type, __suffix)                                \
	EXPORT_VECTOR(__value_type, 3, __suffix)                                  \
		.def(py::init<float, float, float>())                                 \
		.def(py::init<double, double, double>())                              \
		.def(py::init<int32_t, int32_t, int32_t>())                           \
		.def(py::init<int64_t, int64_t, int64_t>())                           \
		.def_readwrite("x", &Vector3 ## __suffix::x)                          \
		.def_readwrite("y", &Vector3 ## __suffix::y)                          \
		.def_readwrite("z", &Vector3 ## __suffix::z)                          \
	;                                                                         \
/**/
#
#define EXPORT_VECTOR4(__value_type, __suffix)                                \
	EXPORT_VECTOR(__value_type, 4, __suffix)                                  \
		.def(py::init<float, float, float, float>())                          \
		.def(py::init<double, double, double, double>())                      \
		.def(py::init<int32_t, int32_t, int32_t, int32_t>())                  \
		.def(py::init<int64_t, int64_t, int64_t, int64_t>())                  \
		.def_readwrite("x", &Vector4 ## __suffix::x)                          \
		.def_readwrite("y", &Vector4 ## __suffix::y)                          \
		.def_readwrite("z", &Vector4 ## __suffix::z)                          \
		.def_readwrite("w", &Vector4 ## __suffix::w)                          \
	;                                                                         \
/**/

	EXPORT_VECTOR2(float, f);
	EXPORT_VECTOR2(double, d);
	EXPORT_VECTOR2(int32_t, i);
	EXPORT_VECTOR2(uint32_t, u);
	EXPORT_VECTOR2(int64_t, il);
	EXPORT_VECTOR2(uint64_t, ul);

	EXPORT_VECTOR3(float, f);
	EXPORT_VECTOR3(double, d);
	EXPORT_VECTOR3(int32_t, i);
	EXPORT_VECTOR3(uint32_t, u);
	EXPORT_VECTOR3(int64_t, il);
	EXPORT_VECTOR3(uint64_t, ul);

	EXPORT_VECTOR4(float, f);
	EXPORT_VECTOR4(double, d);
	EXPORT_VECTOR4(int32_t, i);
	EXPORT_VECTOR4(uint32_t, u);
	EXPORT_VECTOR4(int64_t, il);
	EXPORT_VECTOR4(uint64_t, ul);

#define _EXPORT_VECTOR_FLOAT_METHODS(__value_type, __type)                    \
	py::def(                                                                  \
		"normalize",                                                          \
		static_cast<__type (*)(__type const&)>(&normalize)                    \
	);                                                                        \
	py::def(                                                                  \
		"rotate_x",                                                           \
		static_cast<__type(*)(__type const&, __value_type)>(                  \
			&rotate_x<__value_type>                                           \
		)                                                                     \
	);                                                                        \
	py::def(                                                                  \
		"rotate_y",                                                           \
		static_cast<__type(*)(__type const&, __value_type)>(                  \
			&rotate_y<__value_type>                                           \
		)                                                                     \
	);                                                                        \
	py::def(                                                                  \
		"rotate_z",                                                           \
		static_cast<__type(*)(__type const&, __value_type)>(                  \
			&rotate_z<__value_type>                                           \
		)                                                                     \
	);                                                                        \
	py::def(                                                                  \
		"rotate",                                                             \
		static_cast<__type(*)(__type const&, __value_type, __type const&)>(   \
			&rotate<__value_type>                                             \
		)                                                                     \
	);                                                                        \
	py::def("cross", &cross<__value_type>);                                   \
/**/

#define EXPORT_VECTOR_FLOAT_METHODS(__value_type, __arity, __suffix)          \
	_EXPORT_VECTOR_FLOAT_METHODS(__value_type,                                \
	                            Vector ## __arity<__value_type>)              \
/**/

	EXPORT_VECTOR_FLOAT_METHODS(float, 3, f);
	EXPORT_VECTOR_FLOAT_METHODS(double, 3, d);

}
