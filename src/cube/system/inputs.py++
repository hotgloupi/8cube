#include <wrappers/boost/python.hpp>

#include "inputs.hpp"

#include <sstream>

using namespace cube::system::inputs;

namespace {

	template<typename T>
	std::string enum_str(T const mod)
	{
		std::stringstream ss;
		ss << mod;
		return ss.str();
	}

	template<typename Sig>
	struct SignalExport
	{
		typedef Sig type;
		static bool exported;

		static
		boost::signals2::connection
		connect(Sig& signal, boost::python::object o)
		{
			return signal.connect(o);
		}
	};
	template<typename T>
	bool SignalExport<T>::exported = false;

}


BOOST_PYTHON_MODULE(inputs)
{
	BOOST_PYTHON_DOCSTRING_OPTIONS();
	namespace py = boost::python;

	{
		py::scope KeyMod_scope = py::enum_<KeyMod>("KeyMod", "Modifiers bitmask")
			.value("none", KeyMod::none)
			.value("lshift", KeyMod::lshift)
			.value("rshift", KeyMod::rshift)
			.value("lctrl", KeyMod::lctrl)
			.value("rctrl", KeyMod::rctrl)
			.value("lalt", KeyMod::lalt)
			.value("ralt", KeyMod::ralt)
			.value("lmeta", KeyMod::lmeta)
			.value("rmeta", KeyMod::rmeta)
			.value("num", KeyMod::num)
			.value("caps", KeyMod::caps)
			.value("mode", KeyMod::mode)
			.value("ctrl", KeyMod::ctrl)
			.value("shift", KeyMod::shift)
			.value("alt", KeyMod::alt)
			.value("meta", KeyMod::meta)
		;

		py::def("__str__", &enum_str<KeyMod>);
		//py::def("__invert__", &op_invert_keymod);
		//py::def("__and__", &op_and_keymod)
	}

	{
		py::scope KeySym_scope = py::enum_<KeySym>("KeySym", "Symbolic keys")
			.value("unknown", KeySym::unknown)
			.value("first", KeySym::first)
			.value("backspace", KeySym::backspace)
			.value("tab", KeySym::tab)
			.value("clear", KeySym::clear)
			.value("return_", KeySym::return_)
			.value("pause", KeySym::pause)
			.value("escape", KeySym::escape)
			.value("space", KeySym::space)
			.value("exclaim", KeySym::exclaim)
			.value("quotedbl", KeySym::quotedbl)
			.value("hash", KeySym::hash)
			.value("dollar", KeySym::dollar)
			.value("ampersand", KeySym::ampersand)
			.value("quote", KeySym::quote)
			.value("leftparen", KeySym::leftparen)
			.value("rightparen", KeySym::rightparen)
			.value("asterisk", KeySym::asterisk)
			.value("plus", KeySym::plus)
			.value("comma", KeySym::comma)
			.value("minus", KeySym::minus)
			.value("period", KeySym::period)
			.value("slash", KeySym::slash)
			.value("k0", KeySym::k0)
			.value("k1", KeySym::k1)
			.value("k2", KeySym::k2)
			.value("k3", KeySym::k3)
			.value("k4", KeySym::k4)
			.value("k5", KeySym::k5)
			.value("k6", KeySym::k6)
			.value("k7", KeySym::k7)
			.value("k8", KeySym::k8)
			.value("k9", KeySym::k9)
			.value("colon", KeySym::colon)
			.value("semicolon", KeySym::semicolon)
			.value("less", KeySym::less)
			.value("equals", KeySym::equals)
			.value("greater", KeySym::greater)
			.value("question", KeySym::question)
			.value("at", KeySym::at)
			.value("leftbracket", KeySym::leftbracket)
			.value("backslash", KeySym::backslash)
			.value("rightbracket", KeySym::rightbracket)
			.value("caret", KeySym::caret)
			.value("underscore", KeySym::underscore)
			.value("backquote", KeySym::backquote)
			.value("a", KeySym::a)
			.value("b", KeySym::b)
			.value("c", KeySym::c)
			.value("d", KeySym::d)
			.value("e", KeySym::e)
			.value("f", KeySym::f)
			.value("g", KeySym::g)
			.value("h", KeySym::h)
			.value("i", KeySym::i)
			.value("j", KeySym::j)
			.value("k", KeySym::k)
			.value("l", KeySym::l)
			.value("m", KeySym::m)
			.value("n", KeySym::n)
			.value("o", KeySym::o)
			.value("p", KeySym::p)
			.value("q", KeySym::q)
			.value("r", KeySym::r)
			.value("s", KeySym::s)
			.value("t", KeySym::t)
			.value("u", KeySym::u)
			.value("v", KeySym::v)
			.value("w", KeySym::w)
			.value("x", KeySym::x)
			.value("y", KeySym::y)
			.value("z", KeySym::z)
			.value("delete_", KeySym::delete_)
			.value("kp0", KeySym::kp0)
			.value("kp1", KeySym::kp1)
			.value("kp2", KeySym::kp2)
			.value("kp3", KeySym::kp3)
			.value("kp4", KeySym::kp4)
			.value("kp5", KeySym::kp5)
			.value("kp6", KeySym::kp6)
			.value("kp7", KeySym::kp7)
			.value("kp8", KeySym::kp8)
			.value("kp9", KeySym::kp9)
			.value("kp_period", KeySym::kp_period)
			.value("kp_divide", KeySym::kp_divide)
			.value("kp_multiply", KeySym::kp_multiply)
			.value("kp_minus", KeySym::kp_minus)
			.value("kp_plus", KeySym::kp_plus)
			.value("kp_enter", KeySym::kp_enter)
			.value("kp_equals", KeySym::kp_equals)
			.value("up", KeySym::up)
			.value("down", KeySym::down)
			.value("right", KeySym::right)
			.value("left", KeySym::left)
			.value("insert", KeySym::insert)
			.value("home", KeySym::home)
			.value("end", KeySym::end)
			.value("pageup", KeySym::pageup)
			.value("pagedown", KeySym::pagedown)
			.value("f1", KeySym::f1)
			.value("f2", KeySym::f2)
			.value("f3", KeySym::f3)
			.value("f4", KeySym::f4)
			.value("f5", KeySym::f5)
			.value("f6", KeySym::f6)
			.value("f7", KeySym::f7)
			.value("f8", KeySym::f8)
			.value("f9", KeySym::f9)
			.value("f10", KeySym::f10)
			.value("f11", KeySym::f11)
			.value("f12", KeySym::f12)
			.value("f13", KeySym::f13)
			.value("f14", KeySym::f14)
			.value("f15", KeySym::f15)
			.value("numlock", KeySym::numlock)
			.value("capslock", KeySym::capslock)
			.value("scrollock", KeySym::scrollock)
			.value("rshift", KeySym::rshift)
			.value("lshift", KeySym::lshift)
			.value("rctrl", KeySym::rctrl)
			.value("lctrl", KeySym::lctrl)
			.value("ralt", KeySym::ralt)
			.value("lalt", KeySym::lalt)
			.value("rmeta", KeySym::rmeta)
			.value("lmeta", KeySym::lmeta)
			.value("lsuper", KeySym::lsuper)
			.value("rsuper", KeySym::rsuper)
			.value("mode", KeySym::mode)
			.value("compose", KeySym::compose)
		;
		py::def("__str__", &enum_str<KeySym>);
	}
	py::class_<boost::signals2::connection>(
			"Connection",
			"Window's events slot"
		).def(
			"disconnect",
			&boost::signals2::connection::disconnect,
			"Disconnects the signal"
		).def(
			"connected",
			&boost::signals2::connection::connected,
			"True if the connection is both initialized and active"
		)
	;

#define MKSTR(S) #S

#define DEF_CONNECT(cls, name) do {                                           \
	typedef SignalExport<Inputs::on_ ## name ## _t> Signal;                   \
	typedef Signal::type signal_t;                   \
	typedef Inputs::on_ ## name ## _signature_t signature_t; \
                                                                              \
	cls.add_property(                                                         \
		"on_" #name,                                                          \
		py::make_function(                                                    \
			&Inputs::on_ ## name,                                             \
			py::return_internal_reference<>()                                 \
		),                                                                    \
		"connector for the " MKSTR(name) " signal"                            \
	);                                                                        \
	if (!Signal::exported)                                                    \
	{                                                                         \
		Signal::exported = true;                                              \
		py::class_<typename Signal::type, boost::noncopyable>(            \
				MKSTR(on_ ## name ## _t),                                     \
				MKSTR(name) " signal type", py::no_init                                   \
			)                                                                 \
			.def(                                                             \
				"connect",                                                    \
				&Signal::connect,                                            \
				py::with_custodian_and_ward<1, 2>()                           \
			)                                                                 \
		    .def("__call__", static_cast<signature_t>(&signal_t::operator()));\
	}                                                                         \
} while (false)                                                               \
	/**/

	py::class_<Inputs, boost::noncopyable> cls("Inputs");

	DEF_CONNECT(cls, expose);
	DEF_CONNECT(cls, resize);
	DEF_CONNECT(cls, idle);
	DEF_CONNECT(cls, quit);
	DEF_CONNECT(cls, keydown);
	DEF_CONNECT(cls, keyup);
	DEF_CONNECT(cls, mousemove);

# undef DEF_CONNECT

}

