#include <wrappers/boost/python.hpp>

#include <iostream>
#include <stdexcept>

#include <cube/gl/renderer.hpp>

#include "inputs.hpp"
#include "window.hpp"

namespace {

	struct Wrap
	{
		static
		std::unique_ptr<cube::system::window::Window>
		create_window(std::string title,
		              std::auto_ptr<cube::system::window::RendererContext> context)
		{
			std::unique_ptr<cube::system::window::RendererContext> ptr(context.release());
			return cube::system::window::Window::create(
			    std::move(title),
			    std::move(ptr)
			);
		}
	}; // !Wrap

} // !anonymous

BOOST_PYTHON_MODULE(window)
{
	BOOST_PYTHON_DOCSTRING_OPTIONS();
	namespace py = boost::python;

	using namespace cube::system::window;

	py::enum_<Window::Flags>("WindowFlags")
		.value("none", Window::Flags::none)
		.value("borderless", Window::Flags::borderless)
		.value("fullscreen", Window::Flags::fullscreen)
		.value("fullscreen_desktop", Window::Flags::fullscreen_desktop)
		.value("hidden", Window::Flags::hidden)
	;

	py::class_<Window, std::auto_ptr<Window>, boost::noncopyable>(
			"Window",
			"Main window",
			py::no_init
		)
		.def(
			"poll",
			static_cast<etc::size_type (Window::*)()>(&Window::poll)
		)
		.def(
			"poll",
			static_cast<etc::size_type (Window::*)(etc::size_type const)>(&Window::poll)
		)
		.def("show", &Window::show)
		.def("hide", &Window::hide)
		.def("minimize", &Window::minimize)
		.def("maximize", &Window::maximize)
		.add_property(
			"renderer",
			py::make_function(
				&Window::renderer,
				py::return_internal_reference<>()
			)
		)
		.add_property(
			"inputs",
			py::make_function(
				&Window::inputs,
				py::return_internal_reference<>()
			)
		)
		.def(
			"confine_mouse",
			&Window::confine_mouse
		)
		.def(
			"swap_buffers",
			&Window::swap_buffers
		)
	;
	py::class_<
		RendererContext,
		boost::noncopyable,
		std::auto_ptr<RendererContext>
	>("RendererContext", py::no_init)
		.add_property("width", &RendererContext::width)
		.add_property("height", &RendererContext::height)
		.add_property("flags", &RendererContext::flags)
		.add_property("name", &RendererContext::name)
		.def("size", &RendererContext::size)
	;
	typedef std::unique_ptr<Window>
		(*create_window_signature)(std::string,
		                           etc::size_type const,
		                           etc::size_type const,
		                           Window::Flags const,
		                           cube::gl::renderer::Name const);

	py::def(
	    "create_window",
	    static_cast<create_window_signature>(&Window::create)
	);
	py::def(
	    "create_window",
	    &Wrap::create_window
	);
	py::def(
		"create_renderer_context",
		&Window::create_renderer_context
	);
	py::register_unique_ptr_converter<RendererContext>();
	py::register_unique_ptr_converter<Window>();
}
