#include <wrappers/boost/python.hpp>

#include <iostream>
#include <stdexcept>

#include <cube/gl/renderer.hpp>

#include "inputs.hpp"
#include "window.hpp"

namespace {

	struct Wrap
	{
		static
		std::auto_ptr<cube::system::window::Window>
		create_window(std::string const& title,
		              etc::size_type const width,
		              etc::size_type const height,
					  cube::gl::renderer::Name const name)
		{
			std::auto_ptr<cube::system::window::Window> ptr;
			ptr.reset(
				cube::system::window::create_window(
					title, width, height, name
				).release()
			);
			return ptr;
		}
	}; // !Wrap

} // !anonymous

BOOST_PYTHON_MODULE(window)
{
	BOOST_PYTHON_DOCSTRING_OPTIONS();
	namespace py = boost::python;

	using namespace cube::system::window;

	py::import("cube.gl.renderer")["Name"];

	py::class_<Window, std::auto_ptr<Window>, boost::noncopyable>(
			"Window",
			"Main window",
			py::no_init
		)
		.def(
			"poll",
			static_cast<uint32_t (Window::*)()>(&Window::poll)
		)
		.def(
			"poll",
			static_cast<uint32_t (Window::*)(uint32_t)>(&Window::poll)
		)
		.add_property(
			"renderer",
			py::make_function(
				&Window::renderer,
				py::return_internal_reference<>()
			)
		)
		.add_property(
			"inputs",
			py::make_function(
				&Window::inputs,
				py::return_internal_reference<>()
			)
		)
		.def(
			"confine_mouse",
			&Window::confine_mouse
		)
		.def(
			"swap_buffers",
			&Window::swap_buffers
		)
	;
	py::def("create_window", &Wrap::create_window);
}
