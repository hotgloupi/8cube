#include "visit/breadth_first_search.hpp"
#include "visit/depth_first_search.hpp"

#include <cube/exception.hpp>

#include <wrappers/boost/python.hpp>

namespace py = boost::python;
using namespace cube::scene;
using namespace cube::scene::node;
using cube::exception::Exception;

namespace {

	template<typename VisitorDefaults>
	struct callback_visitor
		: public VisitorDefaults
	{
		py::object _cb;
		callback_visitor(py::object cb) : _cb{cb} {}
		void discover_vertex(Node& n) { _cb(n); }
	};

	class bfs_default_visitor
		: public visit::DefaultBreadthFirstVisitor
	{
		virtual ~bfs_default_visitor() {}
	};

	void bfs(Graph& g, py::object o)
	{
		if (PyCallable_Check(o.ptr()))
		{
			visit::breadth_first_search(g, callback_visitor<visit::DefaultBreadthFirstVisitor>{o});
		}
		else
			throw Exception{"Visitor must be callable"};
	}

	void dfs(Graph& g, py::object o)
	{
		if (PyCallable_Check(o.ptr()))
		{
			visit::depth_first_search(g, callback_visitor<visit::DefaultDepthFirstVisitor>{o});
		}
		else
			throw Exception{"Visitor must be callable"};
	}
}

BOOST_PYTHON_MODULE(visit)
{
	py::def("breadth_first_search", &bfs);
	py::def("bfs", &bfs);
	py::def("depth_first_search", &dfs);
	py::def("dfs", &dfs);
}
