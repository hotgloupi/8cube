#include <etc/test/Registry.hpp>
#include <etc/test/Case.hpp>

#include <etc/log.hpp>
#include <etc/memory.hpp>

#include <cube/exception.hpp>

#include <wrappers/boost/python.hpp>

using namespace etc::test;
namespace py = boost::python;

namespace {

	ETC_LOG_COMPONENT("cube.test.registry");

	template<typename Fn>
	void propagate_exception(Fn&& fn)
	{
		try { fn(); }
		catch (py::error_already_set const&)
		{
			py::object exception, value, traceback;

			{
				PyObject* py_exception;
				PyObject* py_value;
				PyObject* py_traceback;
				PyErr_Fetch(&py_exception, &py_value, &py_traceback);
				//PyErr_Display(py_exception, py_value, py_traceback);

				if (py_exception == nullptr)
					throw std::runtime_error(
						"Internal boost python error while catching a python "
						"exception"
					);
				exception = py::object(py::handle<>(py_exception));
				value = py::object(py::handle<>(py::allow_null(py_value)));
				traceback = py::object(py::handle<>(py::allow_null(py_traceback)));
			}

			auto msg = py::to_string(exception.attr("__name__"))
				+ ": " + py::to_string(value);
			// XXX missing traceback
			throw cube::exception::Exception(msg);
		}
	}

	class PythonTestCase
		: public Case
	{
		py::object _callable;

	public:
		PythonTestCase(py::object callable,
		               std::string file,
		               unsigned int line,
		               std::string name,
		               CaseSetupBase* setup)
			: Case(std::move(file), line, std::move(name), setup)
			, _callable{callable}
		{}

		void operator ()() override
		{ propagate_exception(_callable); }
	};

	class PythonSetupTestCase
		: public CaseSetupBase
	{
	private:
		py::object _setup;
		py::object _teardown;

	public:
		PythonSetupTestCase(py::object setup, py::object teardown)
			: _setup(setup)
			, _teardown(teardown)
		{}
		void setUp() override { _setup(); }
		void tearDown() override { _teardown(); }
	};

	void registry_add(py::object setup,
	                  py::object teardown,
	                  py::object callable,
	                  std::string file,
	                  unsigned int line,
	                  std::string name)
	{
		auto case_setup = etc::make_unique<PythonSetupTestCase>(setup, teardown);
		new PythonTestCase(
			callable,
			std::move(file),
			line,
			std::move(name),
			case_setup.get()
		);
		case_setup.release();
	}

	bool registry_run() { return registry().run(); }

} // !anonymous

BOOST_PYTHON_MODULE(registry)
{

	py::def("add", &registry_add);
	py::def("run", &registry_run);
}

