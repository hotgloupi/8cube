#include "Window.hpp"

#include <cube/gl/renderer/Painter.hpp>
#include <cube/gl/renderer/Renderer.hpp>
#include <cube/gl/vector/Vector.hpp>
#include <cube/python.hpp>
#include <cube/system/inputs.hpp>
#include <cube/system/window.hpp>

#include <etc/meta/select_overload.hpp>

using cube::gui::window::Window;
using etc::meta::select_overload;
namespace py = boost::python;

BOOST_PYTHON_MODULE(Window)
{
	py::class_<Window, boost::noncopyable>("Window", py::no_init)
		.def(py::init<int, int, std::string>())
		.def(py::init<int, int>())
		.add_property("size", py::select_getter(&Window::size))
		.add_property("width", py::select_getter(&Window::width))
		.add_property("height", py::select_getter(&Window::height))
		.add_property("renderer", py::make_function(&Window::renderer, py::return_internal_reference<>()))
		.add_property(
			"title",
			py::select_getter(
				&Window::title,
				py::return_value_policy<py::return_by_value>()
			),
			py::select_setter(&Window::title)
		)
		.def("render", &Window::render)
		.def("swap_buffers", &Window::swap_buffers)
		.def("poll", &Window::poll)
		.def(
			"load_document",
			select_overload<std::string const&>::of(&Window::load_document)
		)
		.def(
			"load_document",
			select_overload<boost::filesystem::path const&>::of(&Window::load_document)
		)
		.def("add_font", &Window::add_font)
		.def("show", &Window::show)
		.def("hide", &Window::hide)
		.def("shutdown", &Window::shutdown)
		.add_property("inputs", py::make_function(&Window::inputs, py::return_internal_reference<>()))
		.add_property("system_window", py::make_function(&Window::system_window, py::return_internal_reference<>()))
	;
}

